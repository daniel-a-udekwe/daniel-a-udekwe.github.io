{
  "hash": "1ad0145aef417c08f6b3a19f9d0dfcda",
  "result": {
    "markdown": "---\ntitle: \"Linear and Non-Linear Regression\"\nauthor: \"Daniel A. Udekwe\"\ndate: \"2023-10-17\"\ncategories: [news, code, analysis]\nimage: \"regression.jpeg\"\n---\n\nRegression is one of the most common algorithms in machine learning. In this post we will explore this algorithm and we will implement it using Python from scratch.\n\nAs the name suggests this algorithm is applicable for Regression problems. Linear Regression is a **Linear Model**. Which means, we will establish a linear relationship between the input variables(**X**) and single output variable(**Y**). When the input(**X**) is a single variable this model is called **Simple Linear Regression** and when there are mutiple input variables(**X**), it is called **Multiple Linear Regression**. Additionally, non-linear regression seeks to establish a non-linear relationship between the input variable (x) and the output (Y)\n\n## Simple Linear Regression\n\nWe discussed that Linear Regression is a simple model. Simple Linear Regression is the simplest model in machine learning.\n\n### Model Representation\n\nIn this problem we have an input variable - **X** and one output variable - **Y**. And we want to build linear relationship between these variables. Here the input variable is called **Independent Variable** and the output variable is called **Dependent Variable**. We can define this linear relationship as follows:$$Y = \\beta_0 + \\beta_1 X$$\n\nThe $\\beta_1$ is called a scale factor or **coefficient** and $\\beta_0$ is called **bias coefficient**. The bias coeffient gives an extra degree of freedom to this model. This equation is similar to the line equation $y = mx +b$ with $m = \\beta_1$(Slope) and $b = \\beta_0$(Intercept). So in this Simple Linear Regression model we want to draw a line between X and Y which estimates the relationship between X and Y.\n\nBut how do we find these coefficients? That's the learning procedure. We can find these using different approaches. One is called **Ordinary Least Square Method** and other one is called **Gradient Descent Approach**. We will use Ordinary Least Square Method in Simple Linear Regression and Gradient Descent Approach in Multiple Linear Regression in post.\n\n### Ordinary Least Square Method\n\nEarlier in this post we discussed that we are going to approximate the relationship between X and Y to a line. Let's say we have few inputs and outputs. And we plot these scatter points in 2D space, we will get something like the following image.\n\n![](regression_1.png)\n\nAnd you can see a line in the image. That's what we are going to accomplish. And we want to minimize the error of out model. A good model will always have least error. We can find this line by reducing the error. The error of each point is the distance between line and that point. This is illustrated as follows.\n\n![](regression_2.jpeg)\n\nAnd total error of this model is the sum of all errors of each point. ie.\n\n$$\nD = \\sum_{i=1}^{m} d_i^2\n$$\n\n$d_i$Distance between line and i^th^ point.\n\n$m$- Total number of points\n\nYou might have noticed that we are squaring each of the distances. This is because, some points will be above the line and some points will be below the line. We can minimize the error in the model by minimizing $D$ And after the mathematics of minimizing $D_i$, we will get;\n\n$$\n\\beta_1 = \\frac{\\sum_{i=1}^{m} (x_i - \\bar{x})(y_i - \\bar{y})}{\\sum_{i=1}^{m} (x_i - \\bar{x})^2}\n$$\n\n$$\n\\beta_0 = \\bar{y} - \\beta_1\\bar{x}\n$$\n\nIn these equations �¯ is the mean value of input variable **X** and �¯ is the mean value of output variable **Y**.\n\nNow we have the model. This method is called [**Ordinary Least Square Method**](https://www.wikiwand.com/en/Ordinary_least_squares). Now we will implement this model in Python.\n\n$$\nY = \\beta_0 + \\beta_1X\n$$\n\n$$\n\\beta_1 = \\frac{\\sum_{i=1}^{m} (x_i - \\bar{x})(y_i - \\bar{y})}{\\sum_{i=1}^{m} (x_i - \\bar{x})^2}\n$$\n\n$$\n\\beta_0 = \\bar{y} - \\beta_1\\bar{x}\n$$\n\n### Implementation\n\nWe are going to use a dataset containing head size and brain weight of different people. This data set has other features. But, we will not use them in this model.. This dataset is available in this [Github Repo](https://github.com/mubaris/potential-enigma). Let's start off by importing the data.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Importing Necessary Libraries\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = (20.0, 10.0)\n\n# Reading Data\ndata = pd.read_csv('headbrain.csv')\nprint(data.shape)\ndata.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(237, 4)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Gender</th>\n      <th>Age Range</th>\n      <th>Head Size(cm^3)</th>\n      <th>Brain Weight(grams)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>4512</td>\n      <td>1530</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>3738</td>\n      <td>1297</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>1</td>\n      <td>4261</td>\n      <td>1335</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>3777</td>\n      <td>1282</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1</td>\n      <td>4177</td>\n      <td>1590</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAs you can see there are 237 values in the training set. We will find a linear relationship between Head Size and Brain Weights. So, now we will get these variables.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Collecting X and Y\nX = data['Head Size(cm^3)'].values\nY = data['Brain Weight(grams)'].values\n```\n:::\n\n\nTo find the values �1 and �0, we will need mean of **X** and **Y**. We will find these and the coeffients.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Mean X and Y\nmean_x = np.mean(X)\nmean_y = np.mean(Y)\n\n# Total number of values\nm = len(X)\n\n# Using the formula to calculate b1 and b2\nnumer = 0\ndenom = 0\nfor i in range(m):\n    numer += (X[i] - mean_x) * (Y[i] - mean_y)\n    denom += (X[i] - mean_x) ** 2\nb1 = numer / denom\nb0 = mean_y - (b1 * mean_x)\n\n# Print coefficients\nprint(b1, b0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.26342933948939945 325.57342104944223\n```\n:::\n:::\n\n\nThere we have our coefficients.\n\n$$\nBrain Weight = 325.573421049 + 0.263429339489 * Head Size\n$$\n\nThat is our linear model.\n\nNow we will see this graphically.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Plotting Values and Regression Line\n\nmax_x = np.max(X) + 100\nmin_x = np.min(X) - 100\n\n# Calculating line values x and y\nx = np.linspace(min_x, max_x, 1000)\ny = b0 + b1 * x\n\n# Ploting Line\nplt.plot(x, y, color='#58b970', label='Regression Line')\n# Ploting Scatter Points\nplt.scatter(X, Y, c='#ef5423', label='Scatter Plot')\n\nplt.xlabel('Head Size in cm3')\nplt.ylabel('Brain Weight in grams')\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=1569 height=799}\n:::\n:::\n\n\nhis model is not so bad. But we need to find how good is our model. There are many methods to evaluate models. We will use **Root Mean Squared Error** and **Coefficient of Determination(�2 Score)**.\n\nRoot Mean Squared Error is the square root of sum of all errors divided by number of values, or Mathematically,\n\n$$\nRMSE = \\sqrt{\\sum_{i=1}^{m} \\frac{1}{m} (\\hat{y_i} - y_i)^2}\n$$\n\nHere ��\\^ is the i^th^ predicted output values. Now we will find RMSE.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Calculating Root Mean Squares Error\nrmse = 0\nfor i in range(m):\n    y_pred = b0 + b1 * X[i]\n    rmse += (Y[i] - y_pred) ** 2\nrmse = np.sqrt(rmse/m)\nprint(rmse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n72.1206213783709\n```\n:::\n:::\n\n\nNow we will find �2 score. �2 is defined as follows,\n\n$$\nSS_t = \\sum_{i=1}^{m} (y_i - \\bar{y})^2\n$$\n\n$$\nSS_r = \\sum_{i=1}^{m} (y_i - \\hat{y_i})^2\n$$\n\n$$\nSS_r = \\sum_{i=1}^{m} (y_i - \\hat{y_i})^2\n$$\n\n\\\n��� is the total sum of squares and ��� is the total sum of squares of residuals.\\\n�2 Score usually range from 0 to 1. It will also become negative if the model is completely wrong. Now we will find �2 Score.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nss_t = 0\nss_r = 0\nfor i in range(m):\n    y_pred = b0 + b1 * X[i]\n    ss_t += (Y[i] - mean_y) ** 2\n    ss_r += (Y[i] - y_pred) ** 2\nr2 = 1 - (ss_r/ss_t)\nprint(r2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.6393117199570003\n```\n:::\n:::\n\n\n0.64 is not so bad. Now we have implemented Simple Linear Regression Model using Ordinary Least Square Method. Now we will see how to implement the same model using a Machine Learning Library called [scikit-learn](http://scikit-learn.org/)\n\n### The scikit-learn approach\n\n[scikit-learn](http://scikit-learn.org/) is simple machine learning library in Python. Building Machine Learning models are very easy using scikit-learn. Let's see how we can build this Simple Linear Regression Model using scikit-learn.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# Cannot use Rank 1 matrix in scikit learn\nX = X.reshape((m, 1))\n# Creating Model\nreg = LinearRegression()\n# Fitting training data\nreg = reg.fit(X, Y)\n# Y Prediction\nY_pred = reg.predict(X)\n\n# Calculating RMSE and R2 Score\nmse = mean_squared_error(Y, Y_pred)\nrmse = np.sqrt(mse)\nr2_score = reg.score(X, Y)\n\nprint(np.sqrt(mse))\nprint(r2_score)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n72.1206213783709\n0.639311719957\n```\n:::\n:::\n\n\nYou can see that this exactly equal to model we built from scratch, but simpler and less code.\n\nNow we will move on to Multiple Linear Regression.\n\n## Multiple Linear Regression\n\nMultiple Linear Regression is a type of Linear Regression when the input has multiple features(variables).\n\n### Model Representation\n\nSimilar to Simple Linear Regression, we have input variable(**X**) and output variable(**Y**). But the input variable has � features. Therefore, we can represent this linear model as follows;\n\n$$\nY = \\beta_0 + \\beta_1x_1 + \\beta_1x_2 + ... + \\beta_nx_n\n$$\n\n$$\nY = \\beta_0x_0 + \\beta_1x_1 + \\beta_1x_2 + ... + \\beta_nx_n\n$$\n\n$$\nx_0 = 1\n$$\n\nNow we can convert this eqaution to matrix form.\n\n$$\nY = \\beta^TX\n$$\n\nWhere,\n\n$$\n\\beta = \\begin{bmatrix}\\beta_0\\\\\\beta_1\\\\\\beta_2\\\\.\\\\.\\\\\\beta_n\\end{bmatrix}\n$$\n\nand,\n\n$$\nX = \\begin{bmatrix}x_0\\\\x_1\\\\x_2\\\\.\\\\.\\\\x_n\\end{bmatrix}\n$$\n\nWe have to define the cost of the model. Cost bascially gives the error in our model. **Y** in above equation is the our hypothesis(approximation). We are going to define it as our hypothesis function.\n\n$$\nh_\\beta(x) = \\beta^Tx\n$$\n\nand the cost is,\n\n$$\nJ(\\beta) = \\frac{1}{2m} \\sum_{i=1}^{m} (h_\\beta(x^{\\textrm{(i)}}) - y^{\\textrm{(i)}})^2\n$$\n\nBy minimizing this cost function, we can get find �. We use **Gradient Descent** for this.\n\n### Gradient Descent\n\nGradient Descent is an optimization algorithm. We will optimize our cost function using Gradient Descent Algorithm.\n\n##### Step 1\n\nInitialize values �0, �1,\\..., �� with some value. In this case we will initialize with 0.\n\n#### Step 2\n\nIteratively update,\n\n$$\n\\beta_j := \\beta_j - \\alpha\\frac{\\partial}{\\partial \\beta_j} J(\\beta)\n$$\n\nuntil it converges.\n\nThis is the procedure. Here � is the learning rate. This operation $\\frac{\\partial}{\\partial \\beta_j} J(\\beta)$ means we are finding partial derivate of cost with respect to each ��. This is called Gradient.\n\nRead [this](https://math.stackexchange.com/questions/174270/what-exactly-is-the-difference-between-a-derivative-and-a-total-derivative) if you are unfamiliar with partial derivatives.\n\nIn step 2 we are changing the values of �� in a direction in which it reduces our cost function. And Gradient gives the direction in which we want to move. Finally we will reach the minima of our cost function. But we don't want to change values of �� drastically, because we might miss the minima. That's why we need learning rate.\n\n![](regression _4.gif)\n\nThe above animation illustrates the Gradient Descent method.\n\nBut we still didn't find the value of �����(�). After we applying the mathematics. The step 2 becomes.\n\n$$\n\\beta_j := \\beta_j - \\alpha\\frac{1}{m}\\sum_{i=1}^m (h_\\beta(x^{(i)})-y^{(i)})x_{j}^{(i)}\n$$\n\nWe iteratively change values of �� according to above equation. This particular method is called **Batch Gradient Descent**.\n\n### Implementation\n\nLet's try to implement this in Python. This looks like a long procedure. But the implementation is comparitively easy since we will vectorize all the equations. If you are unfamiliar with vectorization, read this [post](https://www.datascience.com/blog/straightening-loops-how-to-vectorize-data-aggregation-with-pandas-and-numpy/)\n\nWe will be using a student score dataset. In this particular dataset, we have math, reading and writing exam scores of 1000 students. We will try to find a predict the score of writing exam from math and reading scores. You can get this dataset from this [Github Repo](https://github.com/mubaris/potential-enigma). That's we have 2 features(input variables). Let's start by importing our dataset.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = (20.0, 10.0)\nfrom mpl_toolkits.mplot3d import Axes3D\n\ndata = pd.read_csv('student.csv')\nprint(data.shape)\ndata.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1000, 3)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Math</th>\n      <th>Reading</th>\n      <th>Writing</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>48</td>\n      <td>68</td>\n      <td>63</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>62</td>\n      <td>81</td>\n      <td>72</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>79</td>\n      <td>80</td>\n      <td>78</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>76</td>\n      <td>83</td>\n      <td>79</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>59</td>\n      <td>64</td>\n      <td>62</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe will get scores to an array.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nmath = data['Math'].values\nread = data['Reading'].values\nwrite = data['Writing'].values\n\n# Ploting the scores as scatter plot\nfig = plt.figure()\nax = Axes3D(fig)\nax.scatter(math, read, write, color='#ef1234')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n```\n<Figure size 1920x960 with 0 Axes>\n```\n:::\n:::\n\n\nNow we will generate our X, Y and $\\beta$\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nm = len(math)\nx0 = np.ones(m)\nX = np.array([x0, math, read]).T\n# Initial Coefficients\nB = np.array([0, 0, 0])\nY = np.array(write)\nalpha = 0.0001\n```\n:::\n\n\nWe'll define our cost function.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndef cost_function(X, Y, B):\n    m = len(Y)\n    J = np.sum((X.dot(B) - Y) ** 2)/(2 * m)\n    return J\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ninital_cost = cost_function(X, Y, B)\nprint(inital_cost)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2470.11\n```\n:::\n:::\n\n\nAs you can see our initial cost is huge. Now we'll reduce our cost prediocally using Gradient Descent.\n\n**Hypothesis:** $h_\\beta(x) = \\beta^Tx$\n\n**Loss:** $(h_\\beta(x)-y)$\n\n**Gradient:** $(h_\\beta(x)-y)x_{j}$\n\n**Gradient Descent Updation:** $\\beta_j := \\beta_j - \\alpha(h_\\beta(x)-y)x_{j})$\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndef gradient_descent(X, Y, B, alpha, iterations):\n    cost_history = [0] * iterations\n    m = len(Y)\n    \n    for iteration in range(iterations):\n        # Hypothesis Values\n        h = X.dot(B)\n        # Difference b/w Hypothesis and Actual Y\n        loss = h - Y\n        # Gradient Calculation\n        gradient = X.T.dot(loss) / m\n        # Changing Values of B using Gradient\n        B = B - alpha * gradient\n        # New Cost Value\n        cost = cost_function(X, Y, B)\n        cost_history[iteration] = cost\n        \n    return B, cost_history\n```\n:::\n\n\nNow we will compute final value of $\\beta$\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# 100000 Iterations\nnewB, cost_history = gradient_descent(X, Y, B, alpha, 100000)\n\n# New Values of B\nprint(newB)\n\n# Final Cost of new B\nprint(cost_history[-1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[-0.47889172  0.09137252  0.90144884]\n10.475123473539167\n```\n:::\n:::\n\n\nWe can say that in this model,\n\n$$\nS_{writing} = -0.47889172 + 0.09137252 * S_{math} + 0.90144884 * S_{reading}\n$$\n\nThere we have final hypothesis function of our model. Let's calculate **RMSE** and **�2 Score** of our model to evaluate.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Model Evaluation - RMSE\ndef rmse(Y, Y_pred):\n    rmse = np.sqrt(sum((Y - Y_pred) ** 2) / len(Y))\n    return rmse\n\n# Model Evaluation - R2 Score\ndef r2_score(Y, Y_pred):\n    mean_y = np.mean(Y)\n    ss_tot = sum((Y - mean_y) ** 2)\n    ss_res = sum((Y - Y_pred) ** 2)\n    r2 = 1 - (ss_res / ss_tot)\n    return r2\n\nY_pred = X.dot(newB)\n\nprint(rmse(Y, Y_pred))\nprint(r2_score(Y, Y_pred))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.577143972727788\n0.9097223273061554\n```\n:::\n:::\n\n\nWe have very low value of RMSE score and a good �2 score. I guess our model was pretty good.\n\nNow we will implement this model using scikit-learn.\n\n### The scikit-learn Approach\n\nscikit-learn approach is very similar to Simple Linear Regression Model and simple too. Let's implement this.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\n# X and Y\nX = np.array([math, read]).T\nY = np.array(write)\n\n# Model Intialization\nreg = LinearRegression()\n# Data Fitting\nreg = reg.fit(X, Y)\n# Y Prediction\nY_pred = reg.predict(X)\n\n# Model Evaluation\nrmse = np.sqrt(mean_squared_error(Y, Y_pred))\nr2 = reg.score(X, Y)\n\nprint(rmse)\nprint(r2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4.572887051836439\n0.9098901726717316\n```\n:::\n:::\n\n\nYou can see that this model is better than one which we have built from scratch by a small margin.\n\nThat's it for Linear Regression. I assume, so far you have understood Linear Regression, Ordinary Least Square Method and Gradient Descent.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}